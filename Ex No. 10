import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
from sklearn.datasets import make_blobs

# 1. Generate synthetic data (replace with your data if needed)
X, _ = make_blobs(n_samples=300, centers=3, random_state=0)

# 2. Standardize data
X_scaled = StandardScaler().fit_transform(X)

# 3. Plot original standardized data
plt.scatter(X_scaled[:, 0], X_scaled[:, 1], s=30, c='gray', alpha=0.5)
plt.title("Standardized Data")
plt.show()

# 4. Apply K-Means with K=3 and plot the results
kmeans = KMeans(n_clusters=3, random_state=0).fit(X_scaled)
plt.scatter(X_scaled[:, 0], X_scaled[:, 1], c=kmeans.labels_, s=30, cmap='viridis')
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='red', s=200, alpha=0.5, marker='X')
plt.title("K-Means (K=3) Clustering")
plt.show()

# 5. Elbow Method to find optimal K
wcss = [KMeans(n_clusters=k, random_state=0).fit(X_scaled).inertia_ for k in range(1, 11)]
plt.plot(range(1, 11), wcss, marker='o', linestyle='--')
plt.title('Elbow Method')
plt.show()

# 6. Reapply K-Means with optimal K (assumed K=3)
kmeans_optimal = KMeans(n_clusters=3, random_state=0).fit(X_scaled)
plt.scatter(X_scaled[:, 0], X_scaled[:, 1], c=kmeans_optimal.labels_, s=30, cmap='viridis')
plt.scatter(kmeans_optimal.cluster_centers_[:, 0], kmeans_optimal.cluster_centers_[:, 1], c='red', s=200, alpha=0.5, marker='X')
plt.title("Optimal K-Means Clustering (K=3)")
plt.show()
